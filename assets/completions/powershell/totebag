
using namespace System.Management.Automation
using namespace System.Management.Automation.Language

Register-ArgumentCompleter -Native -CommandName 'totebag' -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)

    $commandElements = $commandAst.CommandElements
    $command = @(
        'totebag'
        for ($i = 1; $i -lt $commandElements.Count; $i++) {
            $element = $commandElements[$i]
            if ($element -isnot [StringConstantExpressionAst] -or
                $element.StringConstantType -ne [StringConstantType]::BareWord -or
                $element.Value.StartsWith('-') -or
                $element.Value -eq $wordToComplete) {
                break
        }
        $element.Value
    }) -join ';'

    $completions = @(switch ($command) {
        'totebag' {
            [CompletionResult]::new('-C', '-C ', [CompletionResultType]::ParameterName, 'Specify the base directory for archiving or extracting.')
            [CompletionResult]::new('--dir', '--dir', [CompletionResultType]::ParameterName, 'Specify the base directory for archiving or extracting.')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Specify the ignore type.')
            [CompletionResult]::new('--ignore-types', '--ignore-types', [CompletionResultType]::ParameterName, 'Specify the ignore type.')
            [CompletionResult]::new('-L', '-L ', [CompletionResultType]::ParameterName, 'Specify the compression level. [default: 5] [possible values: 0-9 (none to finest)] For more details of level of each compression method, see README.')
            [CompletionResult]::new('--level', '--level', [CompletionResultType]::ParameterName, 'Specify the compression level. [default: 5] [possible values: 0-9 (none to finest)] For more details of level of each compression method, see README.')
            [CompletionResult]::new('--log', '--log', [CompletionResultType]::ParameterName, 'Specify the log level')
            [CompletionResult]::new('-m', '-m', [CompletionResultType]::ParameterName, 'Mode of operation.')
            [CompletionResult]::new('--mode', '--mode', [CompletionResultType]::ParameterName, 'Mode of operation.')
            [CompletionResult]::new('-o', '-o', [CompletionResultType]::ParameterName, 'Output file in archive mode, or output directory in extraction mode')
            [CompletionResult]::new('--output', '--output', [CompletionResultType]::ParameterName, 'Output file in archive mode, or output directory in extraction mode')
            [CompletionResult]::new('--to-archive-name-dir', '--to-archive-name-dir', [CompletionResultType]::ParameterName, 'extract files to DEST/ARCHIVE_NAME directory (extract mode).')
            [CompletionResult]::new('-n', '-n', [CompletionResultType]::ParameterName, 'No recursive directory (archive mode).')
            [CompletionResult]::new('--no-recursive', '--no-recursive', [CompletionResultType]::ParameterName, 'No recursive directory (archive mode).')
            [CompletionResult]::new('-l', '-l', [CompletionResultType]::ParameterName, 'List entries in the archive file with long format.')
            [CompletionResult]::new('--long', '--long', [CompletionResultType]::ParameterName, 'List entries in the archive file with long format.')
            [CompletionResult]::new('--generate-completion', '--generate-completion', [CompletionResultType]::ParameterName, 'Generate the completion files')
            [CompletionResult]::new('--overwrite', '--overwrite', [CompletionResultType]::ParameterName, 'Overwrite existing files.')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('-V', '-V ', [CompletionResultType]::ParameterName, 'Print version')
            [CompletionResult]::new('--version', '--version', [CompletionResultType]::ParameterName, 'Print version')
            break
        }
    })

    $completions.Where{ $_.CompletionText -like "$wordToComplete*" } |
        Sort-Object -Property ListItemText
}
